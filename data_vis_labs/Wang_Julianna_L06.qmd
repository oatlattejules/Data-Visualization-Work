---
title: "L06 Scales, Axes, & Legends"
subtitle: "Data Visualization (STAT 302)" 
author: "JULIANNA WANG"
pagetitle: "L06 JULIANNA WANG"

format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-fold: show
    link-external-newwindow: true
    fig-dpi: 300

execute:
  warning: false

from: markdown+emoji 
---


## Overview

The goal of this lab is to explore ways to manage and manipulate scales, axes, and legends within `ggplot2`. 

## Datasets

We'll be using the `tech_stocks.rda`, `corruption.rda`, `cdc.txt`, and a toy dataset.

```{r}
#| label: load-pkgs-data
#| code-fold: false

# load package(s)
library(tidyverse)
library(scales)
library(ggrepel)

# load datasets
load('data/tech_stocks.rda')
load('data/corruption.rda')

# Read in the cdc dataset
cdc <- read_delim(file = "data/cdc.txt", delim = "|") |>
  mutate(
    genhlth = factor(
      genhlth,
      levels = c("excellent", "very good", "good", "fair", "poor")
      )
    )

# set seed
set.seed(86420)

# selecting a random subset of size 100
cdc_small <- cdc |> slice_sample(n = 100)

# Generating toy dataset for exercise 2
toy_data <- tibble(
  theta = seq(0, 2 * pi, length.out = 100),
  obs = rnorm(100, sin(theta), 0.1),
  larger_than = if_else(abs(obs) > abs(sin(theta)), "1", "0")
)
```

## Exercise 1

Using the `tech_stocks` dataset, recreate the following graphic as precisely as possible.

*Hints:*

- `key_glyph`
- `scales` package will be useful
- legend `linewidth` is 1.3
- legend useful values: 0.75 and 0.85
- Eliminated extra space in horizontal direction

::: {.callout-tip icon=false}
## Solution

```{r}
#| label: exercise-1-plot

# label info
label_info <- tech_stocks |>
  slice_max(date, by = company)
  
# building the plot
ggplot(data = tech_stocks, aes(x = date, y = price_indexed)) +
  geom_line(aes(color = company), key_glyph = 'timeseries') +
  scale_color_discrete(name = NULL, limits = c('Facebook', 'Alphabet', 'Microsoft', 'Apple')) + 
  scale_y_continuous(name = NULL, position = 'right', 
                     breaks = seq(0, 500, 100), #seq gives the start, end, and the step size
                     labels = scales::label_currency()
                       ) +  
  scale_x_date(name = NULL, expand = c(0, 0)) + 
  ggtitle('Stock price, indexed') + 
  guides(color = guide_legend(override.aes = list(linewidth = 1.3))) + 
  theme_minimal() + 
  theme(legend.position = 'inside', legend.position.inside = c(0.75, 0.85))
```

:::

## Exercise 2

Using the `corruption.rda` dataset, recreate the following graphic as precisely as possible.

*Hints:*
  
- Only use 2015 data
- Transparency is 0.6
- `"y ~ log(x)"`; method `"lm"`; and color is `grey40`
- Point size is 3 in legend
- color palette is `"Set1"`
- Package `ggrepel`
  - `box.padding` is 0.6
  - Minimum segment length is 0
  - seed is 9876

::: {.callout-tip icon=false}
## Solution

```{r}
#| label: exercise-2-plot

# getting only 2015 data
year_2015 <- corruption |>
  filter(year == 2015, !is.na(cpi), !is.na(hdi))

# label info for countries 
label_info <- year_2015 |>
  filter(country %in% c('Singapore', 'United States', 'Japan', 'Chile', 'Argentina', 
                        'Ghana', 'China', 'Iraq', 'Niger'))

# building the plot 
ggplot(data = year_2015, aes(x = cpi, y = hdi)) + 
  geom_point(aes(color = region), alpha = 0.6) + 
  scale_color_brewer(palette = 'Set1') +
  geom_smooth(method = 'lm', formula = 'y ~ log(x)', color = 'grey40', se = FALSE) + 
  geom_text_repel(data = label_info, aes(label = country), box.padding = 0.6,
                  min.segment.length = 0, seed = 9876, show.legend = FALSE) + 
  xlab('Corruption Perceptions Index, 2015 \n(100 = least corrupt)') + 
  ylab('Human Development Index, 2015 \n(1.0 = most developed)') + 
  guides(color = guide_legend(override.aes = list(size = 3))) + 
  theme_minimal() + 
  theme(legend.position = 'inside', legend.position.inside = c(1,0),
        legend.justification = c(1,0), legend.title = element_blank())
  
```

:::
  
## Exercise 3

Use `toy_data` to recreate the following graphic as precisely as possible.

*Hints:*

- Point sizes are 3
- Point colors: `#E66100`, `#5D3A9B`
- Point transparency is 0.8
- `stat_function()` will be useful
  - line size is 1.3 and line color is `#56B4E9`
- `quote()` will be useful

::: {.callout-tip icon=false}
## Solution

```{r}
#| label: exercise-3-plot

# building the plot 
ggplot(data = toy_data, aes(x = theta, y = obs, color = larger_than)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_manual(values = c('#5D3A9B', '#E66100'), guide = 'none') + 
  stat_function(fun = sin, color = '#56B4E9', linewidth = 1.3) + 
  xlab('θ') + 
  ylab('sin(θ)') +
  theme_minimal()
  
``` 

:::

## Exercise 4

Using `cdc_small`, construct a scatterplot of `weight` by `height` with the following requirements: 

- Size of plotting characters should be 3.
- Color and shape should both identify `genhlth`.
- Only one legend: for both color and shape.
- Legend title should be "General Health?" with a newline starting after general.
- Legend categories should be ordered from excellent (top) to poor (bottom) with each word in category capitalized in the legend.
- Legend should be placed in the lower right-hand corner of the plotting area. 
- Color should follow the `"Set1"` palette.
- Shape should have a solid triangle (17) for excellent, solid circle (19) for very good, an `x` (4) for poor, an hollow rotated square with an `x` in it (9) for fair, and a solid square (15) for good.
- `height` values should be limited between 55 and 80.
- `height` axis should display every 5th number between 55 and 80 and be appropriately labeled (i.e. `55 in`, `60 in`, ..., `80 in`). No axis title is necessary.
- `weight` values should be limited between 100 and 300. 
- `weight` axis should be `trans` to log base 10 scale, but still display weights in pounds starting at 100 and displaying every 25 pounds until 300. Must be appropriately labeled (i.e. `100 lbs`, `125 lbs`, ..., `300 lbs`). No axis title is necessary.
- Graph title should be `CDC BRFSS: Weight by Height`.
- Minimal theme.

::: {.callout-tip icon=false}
## Solution

```{r}
#| label: exercise-4-plot

## assign shape via aes(shape = number)

# building the plot
ggplot(data = cdc_small, aes(x = height, y = weight, color = genhlth, shape = genhlth)) + 
  geom_point(size = 3) + 
  scale_x_continuous(limits = c(55, 80), breaks = seq(55, 80, 5), 
                     labels = scales::unit_format(unit = 'in')) + 
  scale_y_continuous(limits = c(100, 300),  breaks = seq(100, 300, 25), 
                     trans = 'log10', labels = scales::unit_format(unit = 'lbs')) + 
  scale_shape_manual(name = 'General\nHealth?', 
                     labels = c('Excellent', 'Very Good', 'Good', 'Fair', 'Poor'),
                     values = c(17, 19, 15, 9, 4)) + 
  scale_color_brewer(name = 'General\nHealth?', 
                     labels = c('Excellent', 'Very Good', 'Good', 'Fair', 'Poor'),
                     palette = 'Set1') + 
  xlab(NULL) + 
  ylab(NULL) + 
  ggtitle('CDC BRFSS: Weight by Height') +   
  theme_minimal() + 
  theme(legend.position = c(1,0), legend.justification = c(1,0)) + 
  guides(color = guide_legend(override.aes = list(shape = c(17, 19, 15, 9, 4))))
 
```

:::
