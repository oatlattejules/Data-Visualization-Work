---
title: "L01 Introduction"
subtitle: "Data Visualization (STAT 302)" 
author: "JULIANNA WANG"
format:
  html:
    toc: true
    embed-resources: true
    link-external-newwindow: true
execute:
  warning: false
from: markdown+emoji 
editor_options: 
  chunk_output_type: console
---

## Load package(s) & data

1.  Ensure software for this course is properly installed and functional
2.  Understand the importance of visualization
3.  Develop and follow a proper workflow
4.  Construct and explore a few plots using `ggplot2`
5.  Add layers to a plot that include title, axis, and pre-set themes

```{r}
#| label: load-packages

# Load package(s)
library(tidyverse)

# Data can go here as well
load('data/legosets.rda')
```

## Tasks

Complete the following tasks. For many of these you'll need to simply **indicate that you have completed the task**.

### Task 1 :white_check_mark: 

Download and install [R Software](https://cran.rstudio.com/). 

### Task 2 :white_check_mark:

1.  Download and install [RStudio](https://www.rstudio.com/products/rstudio/download4/).
2.  Open RStudio and ensure it and R have been properly installed.
3.  Go to **Tools** \> **Global Options** and change the two indicated settings below and click **Apply**. Your other options are likely different than what is pictured. This is okay and we suggest you leave them as is until you become more familiar with RStudio. 

**See html file for missing figure**

### Task 3 :white_check_mark:

Take some time to explore the [Quarto](https://quarto.org/) and [ggplot2](https://ggplot2.tidyverse.org/index.html) websites. We suggest bookmarking them because they will be extremely useful references.

We highly recommend reading through the [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/rstudio.html). 

### Task 4 :white_check_mark:

Install the following packages: 

-   `tidyverse`, actually it is a collection/universe of packages being installed
-   `skimr`
-   `devtools` 

### Task 5 :white_check_mark:

1.  Download `L01_introduction.zip` from Canvas.
2.  Unzip the file and place the `data_vis_labs` directory where you would like to keep all of your lab work for this course.
3.  Open RStudio and create a project folder for this *existing directory*.
4.  Rename `template_L01.qmd` to `Lastname_Firstname_L01.qmd`
5.  Render the file with `Cmd/Ctrl + Shift + K` or click the Render button.

### Task 6 (optional) :white_check_mark:

If you are new to RStudio we strongly recommend reading through Chapters 1-4 of the [Stat 202 text book](https://nustat.github.io/intro-stat-data-sci/).

## Exercise 1

Let's delve into why data visualizations are important.

### Visualization 1

Read the following article and answer the following questions.

[bars_vs_grocery_stores](https://flowingdata.com/2014/05/29/bars-versus-grocery-stores-around-the-world/)

1)  List one thing you learned from the article?


:::{.callout-tip icon='false'}
## Solution
There is a high concentration of bars in Wisconsin, which the Floatingsheep group coined as the "beer belly of America."
:::


2)  How did the main visualization (United States) enhance the article?

:::{.callout-tip icon='false'}
## Solution
The visualization shows the ratio of bars and grocery stores for every 10 mile radius in the United States. This allows readers to see the relationship of bars and grocery stores for each area and also shows geographical trends.
:::

3)  List at least one thing you liked about the \[United States\] graphic and one thing you think could be improved.

:::{.callout-tip icon='false'}
## Solution
I like the use of contrasting colors to represent the different relationships between bars and grocery stores. One thing that could be improved is how the "evens" are displayed. The off-white color is hard to see against the white background.
:::

<br>

### Visualization 2

Open this [dashboard](https://edgarruiz.shinyapps.io/db-dashboard/) and answer the following questions.

1)  What story is this dashboard telling and how do the visualizations enhance that?

:::{.callout-tip icon='false'}
## Solution
The dashboard shows the flight data of several airlines and the most popular destinations for travelers across the span of a year. The visualizations enhance this by showing numeric data and including interactive features for the viewer to use.
:::

2)  What might a dashboard provide that a static graphic cannot.

:::{.callout-tip icon='false'}
## Solution
A dashboard can provide interactive features for the viewer to explore the data and understand it in greater detail. For example, this specific dashboard allows viewers to click on individual bars in the bar chart to look at monthly and daily flight data as well as daily flight data for each of the popular destinations (airports).
:::

## Exercise 2

Let's look at some interesting patterns in the history of LEGO! We'll be using data from the [`lego` package](https://github.com/seankross/lego) located `data/legosets.rda`.

First, let's look at the average cost of LEGO sets over time. The main variable of interest here is `USD_MSRP`, or the manufacturer's suggested retail price in constant dollars. 

:::{.callout-tip icon='false'}
## Solution
```{r}
#| label: exercise-2-plot

# data wrangling -- average price of legoset (avg_price)
yearly_data <-legosets |> ## |> == pipe 
  group_by(Year) |> 
  summarise(
    avg_price = mean(USD_MSRP, na.rm = TRUE),
    num_sets = n() # n() calculates how many rows 
  )

# build the line graph
ggplot(data = yearly_data, mapping = aes(x = Year, y = avg_price)) + 
  geom_line() + 
  geom_point() + 
  theme_minimal() + 
  labs(
    title = 'Average price of LEGO sets', 
    subtitle = 'Amounts are reported in current USD',
    x = 'Year', 
    y = 'Price (USD)',
    caption = 'Source: LEGO'
  )
```
:::

## Exercise 3

Let's explore how many unique themes LEGO now offers.

```{r}
#| label: exerise-3-initial-plot
#| echo: false
 
# remove #| eval = FALSE so the plot appears 

theme_counts <- legosets %>%
  count(Theme)

theme_counts %>%
  ggplot(aes(y = Theme, x = n)) +
  geom_col() +    # or geom_bar(stat = "identity") +
  labs(
    x = "Number of Sets",
    y = NULL
  ) +
  theme_minimal()
```

What is bad/ugly about the plot above?

:::{.callout-tip icon='false'}
## Solution
The theme names are overlapping each other and it is hard to tell which theme belongs to which bar. This could be the case of there being too many bars represented in the bar plot. The bars should be arranged in either ascending or descending order. 
:::

Now remake the plot BUT with the improvements addressing the issues you noted above.

:::{.callout-tip icon='false'}
## Solution
```{r}
#| label: exercise-3-plot

# data wrangling 
theme_counts <- legosets |>
  count(Theme, sort = TRUE) |>
    mutate(
    Theme = factor(Theme) |> 
    fct_inorder() |>
    fct_rev()
  )

# graph
theme_counts |>
  slice_max(n, n = 10) |>
  ggplot(aes(y = Theme, x = n)) +
  geom_col() +   
  labs(
    title = 'Top 10 LEGO Sets',
    x = "Number of Sets",
    y = NULL,
    caption = 'Source: LEGO'
  ) +
  theme_minimal()
```
:::

## Exercise 4

Now you try, let's look at how the number of pieces per set has changed over time. Because Duplo sets are much smaller (since they're designed for toddlers), we made a special indicator variable for them shown in the code below.

Use an appropriate graph to plot the average number of pieces over time. Have either separate lines or separate plots for the Duplo and Lego categories. Be sure the title, x-axis, and y-axis are properly labeled.

:::{.callout-tip icon='false'}
## Solution
```{r}
#| label: exercise-4-lego-pieces

# data wrangling 
pieces_per_year <- legosets |>
  # new indicator variable
  mutate(Duplo = ifelse(Theme == "Duplo", "Duplo", "Lego")) |>
  # group_by() both year and Duplo
  group_by(Year, Duplo) |>
  # summarize() mean pieces
  summarize(mean_pieces = mean(Pieces, na.rm = TRUE)) |>
  ungroup()

# graph 
ggplot(data = pieces_per_year, mapping = aes(x = Year, y = mean_pieces, color = Duplo )) + 
  geom_line() + 
  geom_point() + 
  theme_minimal() + 
  labs(
    title = 'Average piece count of LEGO sets', 
    x = 'Year', 
    y = 'Number of Pieces',
    caption = 'Source: LEGO'
  )

```
:::

What trends do you notice in the plots? Are you surprised by the plots?

:::{.callout-tip icon='false} 
## Solution
In general, LEGO piece counts increase over time whereas Duplo piece counts have an initial decrease and over time, show a slight increase before leveling off. However, there are some outliers to these general trends. For instance, there is a significant increase in LEGO Piece counts between 2005 and 2010 and a decrease in Diplo piece counts right before 1990.
::: 
